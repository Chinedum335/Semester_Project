[["database-design-and-architecture.html", "Cystopteridaceae Phylogeny Project Chapter 1 Database design and architecture 1.1 Building the Database", " Cystopteridaceae Phylogeny Project Chinedum Anajemba 2023-03-19 Chapter 1 Database design and architecture We are going to build a relational database which will translate real-world relationships between our data entities into structural relationships between our data tables. Let’s take a look at the content and structure of the database: Figure 1.1: Diagram of the cystpteridaceae database The database is composed of 2 tables- the sample_Info and the phasing_stat table. The sample_info table includes individual information on the taxonomy, ploidy level and source of each species that are used in this project. The phasing statistics table provides the statistics for each sample (i.e. species) used in this project. Primary keys are in italics and foreign keys are in bold. The goFlagID is a unique number assigned to each species/sample and it is the foreign key that connects both tables 1.1 Building the Database We will build the database using RSQLite, which is an R package that provides an interface with SQLite such that you can interact with the database from within R. RSQLite relies on another R package called DBI (which stands for database interface). DBI is a package that provides generic functions for interfacing databases with R, and RSQLite makes adjustments that are specific to SQLite. So, first things first, we are going to load the DBI package: library(DBI) 1.1.1 Establising a database connection The next step is to connect or rather create a new database and the dbConnect function performs this task. my_db &lt;- dbConnect(RSQLite::SQLite(), &quot;my_db.db&quot;) 1.1.2 Creating the sample_info table in the database To create, import, and plug the sample_info table in the database. Use the code below: # The line below creates the sample_info table in the database # dbExecute(my_db, &quot;CREATE TABLE sample_info ( goFlagID varchar(20) NOT NULL, species_name varchar(30), species_family char(20), ploidy varchar(3), species_abbreviation varchar(10), provenance varchar(45), collector varchar(20), database_ID varchar(30), voucher_ID varchar(30), PRIMARY KEY (goFlagID) );&quot;) # The line below imports the sample_info data # sample_info &lt;- read.csv(&quot;sample_info.csv&quot;, stringsAsFactors = FALSE) # The line below plugs the sample_info data into table # dbWriteTable(my_db, &quot;sample_info&quot;, sample_info, append = TRUE) # The line below sends queries to the database # dbGetQuery(my_db, &quot;SELECT * FROM sample_info LIMIT 10;&quot;) 1.1.3 Creating the Phasing_stats_table in the database To create, import, and plug the Phasing_stats table in the database. Use the code below: # The line below creates the Phasing_stats table in the database # dbExecute(my_db, &quot;CREATE TABLE Phasing_stats_table ( species_abbreviation varchar(10) NOT NULL PRIMARY KEY, goFlagID varchar(20) NOT NULL, no_of_loci INTEGER, no_var_loc INTEGER, no_nonvar_loc INTEGER, no_phased_loci INTEGER, avg_length float, avg_nonvar float, avg_het float, FOREIGN KEY (goFlagID) REFERENCES sample_info(goFlagID) );&quot;) # The line below imports the Phasing_stat data # Phasing_stat_table &lt;- read.csv(&quot;Phasing_stat_table.csv&quot;, stringsAsFactors = FALSE) # The line below plugs the Phasing_stat data into table # dbWriteTable(my_db, &quot;Phasing_stat_table&quot;, Phasing_stat_table, append = TRUE) # The line below sends queries to the database # dbGetQuery(my_db, &quot;SELECT * FROM Phasing_stat_table LIMIT 10;&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
